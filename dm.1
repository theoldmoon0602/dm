.\"
.\" dm.1 - the *roff document processor source for the dm manual
.\"
.TH dm 1 "2019-01-05" "theoldmoon0602"
.ds dc \fIdc\fP
.ds Dc \fIdc\fP
.SH NAME
dm \- an arbitrary precision mathematical processor
.SH SYNOPSIS
dm [-h] [--help]
   [-e expression]
   [-s scale] [--scale scale]
   [--stack-size stacksize]
   [--stack-num stacknum]
   [file ...]
.SH DESCRIPTION
.PP
.IR dm
is a reverse-polish processor which supports
unlimited precision arithmetic.
It also allows you to operate stack or any other scripting.
Normally
.IR dm
evaluate source from file with specified by command line arguments.
All output is to standard output;
.PP
A reverse-polish calculator stores numbers on a stack.
Entering a number pushes it on the stack.
Arithmetic operations pop arguments off the stack and push the results.
.PP
To enter a number in
.IR dm ,
with an optional decimal point.
Exponential notation is not supported.
To enter a negative number,
begin the number with ``-''.
To enter two numbers in succession,
separate them with spaces or newlines.
These have no meaning as commands.
.SH OPTIONS
\*(Dm may be invoked with the following command-line options:
.TP
.B -h
.TP
.B --help
Print a usage message briefly summarizing these command-line options
then exit.
.TP
.B -e \fIexpression\fP
Add the commands in
.I script
to the set of commands to be run while processing the input.
.TP
.B -s scale
.TP
.B --scale scale
Set the scale of decimal numbers. The default scale is 0.
.TP
.B --stack-size size
Set the maximum size of one stack. The default is 50000.
.TP
.B --stack-num num
Set the maximum number of stacks. The default is 1000.
.PP
If any command-line parameters remain after processing the above,
these parameters are interpreted as the names of input files to
be processed.
A file name of
.B -
refers to the standard input stream. 
The standard input will processed if no script files or  expressions are specified.
.PD
.SH
Printing Commands
.TP
.B .
Pop the value of top of the stack, and then print it with a newline.
.PD
.SH
Arithmetic
.TP
.B +
Pops two values off the stack, adds them,
and pushes the result.
The precision of the result is determined only
by the values of the arguments,
and is enough to be exact.
.TP
.B -
Pops two values,
subtracts the first one popped from the second one popped,
and pushes the result.
.TP
.B *
Pops two values, multiplies them, and pushes the result.
The number of fraction digits in the result depends on
the current precision value and the number of fraction
digits in the two arguments.
.TP
.B /
Pops two values,
divides the second one popped from the first one popped,
and pushes the result.
The number of fraction digits is specified by the precision value.
.SH
Stack Control
.TP
.B &
Duplicates the value on the top of the stack,
pushing another copy of it.
Thus, ``4&*.'' computes 4 squared and prints it.
.TP
.B ~
Reverses the order of (swaps) the top two values on the stack.
.TP
.B !
Increments the stack pointer.
.TP
.B ?
Decrements the stack pointer.
.TP
.B }
Switches the current stack to next stack. Thus, increments the stack id.
.TP
.B {
Switches the current stack to previous stack. In other words, decrements the stack id.
.SH
Structure Control
.TP
.B [
Pushes the current instruction pointer to top of the stack.
.TP
.B ]
Pops the top value of the stack, then set the instruction pointer to the value. This is the jump instruction.
.SH EXAMPLES
.PP
this program generates fibonacci sequence forever; ``1&&.}[{&.&?+!~}]''

